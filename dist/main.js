(function (angular) {
  angular.module('Spa', ['ngRoute', 'ui.bootstrap']);
})(angular);

(function (angular) {
  angular.module('Spa').config(['$routeProvider', '$locationProvider', function ($routeProvider, $locationProvider) {

    $locationProvider.hashPrefix('');

    $routeProvider
      .when('/page1', {
        controller: 'Page1Controller',
        templateUrl: 'page1/index.html',
      })
      .when('/page2', {
        controller: 'Page2Controller',
        templateUrl: 'page2/index.html'
      })
      .otherwise({ redirectTo: '/page1' });

  }]);
})(angular);

(function (angular) {
  angular.module('Spa').controller("Page1Controller", ["$scope", function ($scope) {
    $scope.msg = "Alooo Home";
  }]);
})(angular);

(function (angular) {
  angular.module('Spa').controller("Page2Controller", ["$scope", function ($scope) {
    $scope.msg = "Alooo Test";
  }]);
})(angular);
(function (angular) {
  'use strict';

  angular.module('Spa')
    .controller('SpaController', ['$scope', '$rootScope', '$window',
      function ($scope, $rootScope, $window) {

        $scope.test = 'Alooo!!!';

        $scope.clear = function () {
          $scope.data = undefined;
        };

        $scope.fileData = function (content) {
          console.log(content);
        };

      }
    ]);

})(angular);
(function (angular) {
  'use strict';

  angular.module('Spa').directive("dropzone", ['$timeout', function ($timeout) {
    return {
      restrict: "A",
      scope: {
        dropzoneCallback: '=?'
      },
      link: function (scope, element, attrs) {
        scope.elementId = 'element-' + Math.floor(Math.random() * 999) + '-' + new Date().getTime();
        element.attr('id', scope.elementId);

        element.bind('dragover', processDragOverOrEnter);
        element.bind('dragenter', processDragOverOrEnter);
        element.bind('dragend', endDragOver);
        element.bind('dragleave', endDragOver);
        element.bind('drop', dropHandler);

        function dropHandler(angularEvent) {

          var event = angularEvent.originalEvent || angularEvent;
          var file = event.dataTransfer.files[0];
          event.preventDefault();

          var reader = new FileReader();
          reader.onload = function (e) {
            scope.dropzoneCallback(reader.result);
          }
          reader.readAsText(file);

        }
        function processDragOverOrEnter(angularEvent) {
          var event = angularEvent.originalEvent || angularEvent;
          if (event) {
            event.preventDefault();
          }
          event.dataTransfer.effectAllowed = 'copy';
          element.addClass('dragging');
          return false;
        }

        function endDragOver() {
          element.removeClass('dragging');
        }
      }
    }
  }]);
}(angular));
angular.module('Spa').run(['$templateCache', function($templateCache) {$templateCache.put('temp.html','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <meta charset=\'utf-8\'>\r\n  <meta http-equiv=\'X-UA-Compatible\' content=\'IE=edge\'>\r\n  <title>Page Title</title>\r\n  <meta name=\'viewport\' content=\'width=device-width, initial-scale=1\'>\r\n</head>\r\n<body>\r\n  \r\n</body>\r\n</html>');
$templateCache.put('page1/index.html','<div ng-controller="Page1Controller">\r\n  <div class="well well-danger">\r\n    Test : {{msg}}\r\n  </div>\r\n</div>');
$templateCache.put('page2/index.html','<div ng-controller="Page2Controller">\r\n  <div class="well well-danger">\r\n    Test : {{msg}}\r\n  </div>\r\n</div>');}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
